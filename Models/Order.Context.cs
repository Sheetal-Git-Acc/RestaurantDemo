//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RestaurantDemo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestaurantEntities3 : DbContext
    {
        public RestaurantEntities3()
            : base("name=RestaurantEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Order> Orders { get; set; }
    
        public virtual ObjectResult<USP_GetAllOrders_Result> USP_GetAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllOrders_Result>("USP_GetAllOrders");
        }
    
        public virtual int USP_OrderTable(Nullable<int> orderID, Nullable<System.DateTime> orderDate, Nullable<int> restaurantID, Nullable<int> menuItemID, Nullable<int> itemQuantity, Nullable<double> orderAmount, Nullable<int> diningTableID, string operationType)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var restaurantIDParameter = restaurantID.HasValue ?
                new ObjectParameter("RestaurantID", restaurantID) :
                new ObjectParameter("RestaurantID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(double));
    
            var diningTableIDParameter = diningTableID.HasValue ?
                new ObjectParameter("DiningTableID", diningTableID) :
                new ObjectParameter("DiningTableID", typeof(int));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_OrderTable", orderIDParameter, orderDateParameter, restaurantIDParameter, menuItemIDParameter, itemQuantityParameter, orderAmountParameter, diningTableIDParameter, operationTypeParameter);
        }
    
        public virtual int USP_InsertOrder(Nullable<int> orderID, Nullable<System.DateTime> orderDate, Nullable<int> restaurantID, Nullable<int> menuItemID, Nullable<int> itemQuantity, Nullable<double> orderAmount, Nullable<int> diningTableID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var restaurantIDParameter = restaurantID.HasValue ?
                new ObjectParameter("RestaurantID", restaurantID) :
                new ObjectParameter("RestaurantID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(double));
    
            var diningTableIDParameter = diningTableID.HasValue ?
                new ObjectParameter("DiningTableID", diningTableID) :
                new ObjectParameter("DiningTableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertOrder", orderIDParameter, orderDateParameter, restaurantIDParameter, menuItemIDParameter, itemQuantityParameter, orderAmountParameter, diningTableIDParameter);
        }
    
        public virtual ObjectResult<Order> Orders_USP_GetAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Order>("Orders_USP_GetAllOrders");
        }
    
        public virtual ObjectResult<Order> Orders_USP_GetAllOrders(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Order>("Orders_USP_GetAllOrders", mergeOption);
        }
    
        public virtual ObjectResult<Order> Order_USP_InsertOrder(Nullable<int> orderID, Nullable<System.DateTime> orderDate, Nullable<int> restaurantID, Nullable<int> menuItemID, Nullable<int> itemQuantity, Nullable<double> orderAmount, Nullable<int> diningTableID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var restaurantIDParameter = restaurantID.HasValue ?
                new ObjectParameter("RestaurantID", restaurantID) :
                new ObjectParameter("RestaurantID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(double));
    
            var diningTableIDParameter = diningTableID.HasValue ?
                new ObjectParameter("DiningTableID", diningTableID) :
                new ObjectParameter("DiningTableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Order>("Order_USP_InsertOrder", orderIDParameter, orderDateParameter, restaurantIDParameter, menuItemIDParameter, itemQuantityParameter, orderAmountParameter, diningTableIDParameter);
        }
    
        public virtual ObjectResult<Order> Order_USP_InsertOrder(Nullable<int> orderID, Nullable<System.DateTime> orderDate, Nullable<int> restaurantID, Nullable<int> menuItemID, Nullable<int> itemQuantity, Nullable<double> orderAmount, Nullable<int> diningTableID, MergeOption mergeOption)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var restaurantIDParameter = restaurantID.HasValue ?
                new ObjectParameter("RestaurantID", restaurantID) :
                new ObjectParameter("RestaurantID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(double));
    
            var diningTableIDParameter = diningTableID.HasValue ?
                new ObjectParameter("DiningTableID", diningTableID) :
                new ObjectParameter("DiningTableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Order>("Order_USP_InsertOrder", mergeOption, orderIDParameter, orderDateParameter, restaurantIDParameter, menuItemIDParameter, itemQuantityParameter, orderAmountParameter, diningTableIDParameter);
        }
    }
}
